<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--<groupId>net.cardosi.microservices</groupId>-->
    <artifactId>container-microservice</artifactId>
    <version>0.1-SNAPSHOT</version>
    <modules>
        <module>actorclientservice</module>
    </modules>
    <packaging>pom</packaging>

    <parent>
        <artifactId>serviceparent</artifactId>
        <groupId>net.cardosi.microservices</groupId>
        <version>0.1-SNAPSHOT</version>
        <relativePath></relativePath>
    </parent>

    <properties>
        <docker.maven.plugin.fabric8.version>0.21.0</docker.maven.plugin.fabric8.version>
        <docker.repo>gabriolo68</docker.repo>
    </properties>

    <dependencies>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>registrationservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>persistenceservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>configurationservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>actorclientservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>actorserverservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>timeconsumingservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
    </dependencies>
    <!--<packaging>jar</packaging>-->

    <!--<parent>-->
    <!--<groupId>net.cardosi.microservices</groupId>-->
    <!--<artifactId>serviceparent</artifactId>-->
    <!--<version>0.1-SNAPSHOT</version>-->
    <!--</parent>-->
    <!--<modules>-->
    <!--<module>registrationservice</module>-->
    <!--<module>asteriskservice</module>-->
    <!--<module>configurationservice</module>-->
    <!--<module>persistenceservice</module>-->
    <!--&lt;!&ndash;<module>recognitionservice</module>&ndash;&gt;-->
    <!--</modules>-->

    <!--<build>-->
    <!--<plugins>-->
    <!--<plugin>-->
    <!--<groupId>org.springframework.boot</groupId>-->
    <!--<artifactId>spring-boot-maven-plugin</artifactId>-->
    <!--<configuration>-->
    <!--<skip>true</skip>-->
    <!--</configuration>-->
    <!--</plugin>-->
    <!--</plugins>-->
    <!--</build>-->

    <!--<properties>-->
    <!--&lt;!&ndash; Stand-alone RESTFul application for testing only &ndash;&gt;-->
    <!--<start-class>net.cardosi.microservices.services.Main</start-class>-->
    <!--</properties>-->
    <build>
        <plugins>
            <!-- DOCKERIZE WITH FABRIC8 -->
            <plugin>
                <!-- The Docker Maven plugin is used to create docker image with the fat jar -->
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.maven.plugin.fabric8.version}</version>
                <configuration>
                    <logDate>default</logDate>
                    <autoPull>true</autoPull>
                    <images>

                        <!-- Registration service -->
                        <image>
                            <!-- Alias name which can used for linking containers during runtime -->
                            <alias>registrationservice</alias>
                            <name>${docker.repo}/registration-service:${project.version}</name>

                            <!-- ....................................... -->
                            <!-- Build configuration for creating images -->
                            <!-- ....................................... -->
                            <build>
                                <from>java:8u40</from>
                                <!-- Assembly descriptor holds the reference to the created artifact-->
                                <assembly>
                                    <!-- Normally, one would only use 'assembly.xml' if we could put the assembly descriptor
                                         into src/main/docker But this confuses the alexec plugin, so we put it into another
                                         directory and use an absolute pathe -->
                                    <descriptor>${basedir}/registrationservice/src/main/fabric8/assembly.xml
                                    </descriptor>
                                </assembly>
                                <!-- Expose ports -->
                                <ports>
                                    <port>8080</port>
                                </ports>
                                <!-- Default command for the build image -->
                                <cmd>java -Djava.security.egd=file:/dev/./urandom -jar /maven/registrationservice.jar
                                </cmd>
                            </build>

                            <!-- ............................................................... -->
                            <!-- Runtime configuration for starting/stopping/linking containers -->
                            <!-- ............................................................... -->
                            <run>
                                <!-- Assign dynamically mapped ports to maven variables (which can be reused in integration tests) -->
                                <ports>
                                    <port>tomcat.port:8080</port>
                                </ports>
                                <wait>
                                    <!-- Check for this URL to return a 200 return code .... -->
                                    <url>http://localhost:8080/access</url>
                                    <!-- ... but at max 10 seconds -->
                                    <time>10000</time>
                                </wait>
                                <!--<links>-->
                                <!--&lt;!&ndash; Links can be referenced via alias (db) or name (postgres:9). If no link-alias (second "db")-->
                                <!--is given it takes the first part (first "db") as link alias. So, <link>db</link> would be-->
                                <!--enough here &ndash;&gt;-->
                                <!--<link>db:db</link>-->
                                <!--</links>-->
                                <log>
                                    <prefix>TC</prefix>
                                    <color>cyan</color>
                                </log>
                            </run>
                        </image>

                        <!--&lt;!&ndash; Persistence service &ndash;&gt;-->
                        <!--<image>-->
                        <!--&lt;!&ndash; Alias name which can used for linking containers during runtime &ndash;&gt;-->
                        <!--<alias>persistenceservice</alias>-->
                        <!--<name>${docker.repo}/persistence-service:${project.version}</name>-->

                        <!--&lt;!&ndash; ....................................... &ndash;&gt;-->
                        <!--&lt;!&ndash; Build configuration for creating images &ndash;&gt;-->
                        <!--&lt;!&ndash; ....................................... &ndash;&gt;-->
                        <!--<build>-->
                        <!--<from>java:8u40</from>-->
                        <!--&lt;!&ndash; Assembly descriptor holds the reference to the created artifact&ndash;&gt;-->
                        <!--<assembly>-->
                        <!--&lt;!&ndash; Normally, one would only use 'assembly.xml' if we could put the assembly descriptor-->
                        <!--into src/main/docker But this confuses the alexec plugin, so we put it into another-->
                        <!--directory and use an absolute pathe &ndash;&gt;-->
                        <!--<descriptor>${basedir}/persistenceservice/src/main/fabric8/assembly.xml</descriptor>-->
                        <!--</assembly>-->
                        <!--&lt;!&ndash; Expose ports &ndash;&gt;-->
                        <!--<ports>-->
                        <!--<port>8080</port>-->
                        <!--</ports>-->
                        <!--&lt;!&ndash; Default command for the build image &ndash;&gt;-->
                        <!--<cmd>java -Djava.security.egd=file:/dev/./urandom -jar /maven/persistenceservice.jar</cmd>-->
                        <!--</build>-->

                        <!--&lt;!&ndash; ............................................................... &ndash;&gt;-->
                        <!--&lt;!&ndash; Runtime configuration for starting/stopping/linking containers &ndash;&gt;-->
                        <!--&lt;!&ndash; ............................................................... &ndash;&gt;-->
                        <!--<run>-->
                        <!--&lt;!&ndash; Assign dynamically mapped ports to maven variables (which can be reused in integration tests) &ndash;&gt;-->
                        <!--<ports>-->
                        <!--<port>tomcat.port:8080</port>-->
                        <!--</ports>-->
                        <!--<wait>-->
                        <!--&lt;!&ndash; Check for this URL to return a 200 return code .... &ndash;&gt;-->
                        <!--<url>http://${docker.host.address}:${tomcat.port}/access</url>-->
                        <!--&lt;!&ndash; ... but at max 10 seconds &ndash;&gt;-->
                        <!--<time>10000</time>-->
                        <!--</wait>-->
                        <!--<links>-->
                        <!--&lt;!&ndash; Links can be referenced via alias (db) or name (postgres:9). If no link-alias (second "db")-->
                        <!--is given it takes the first part (first "db") as link alias. So, <link>db</link> would be-->
                        <!--enough here &ndash;&gt;-->
                        <!--<link>registrationservice:registrationservice</link>-->
                        <!--</links>-->
                        <!--<log>-->
                        <!--<prefix>TC</prefix>-->
                        <!--<color>cyan</color>-->
                        <!--</log>-->
                        <!--</run>-->
                        <!--</image>-->
                    </images>
                </configuration>

                <!-- Hooking into the lifecycle -->
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


</project>
