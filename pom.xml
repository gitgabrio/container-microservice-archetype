<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--<groupId>net.cardosi.microservices</groupId>-->
    <artifactId>container-microservice</artifactId>
    <version>0.1-SNAPSHOT</version>
    <modules>
        <module>registrationservice</module>
        <module>persistenceservice</module>
        <module>timeconsumingservice</module>
        <module>configurationservice</module>
        <module>actorserverservice</module>
        <module>actorclientservice</module>
    </modules>
    <packaging>pom</packaging>

    <parent>
        <artifactId>serviceparent</artifactId>
        <groupId>net.cardosi.microservices</groupId>
        <version>0.1-SNAPSHOT</version>
        <relativePath></relativePath>
    </parent>

    <properties>
        <docker.maven.plugin.fabric8.version>0.21.0</docker.maven.plugin.fabric8.version>
        <docker.repo>gabriolo68</docker.repo>
        <!-- services properties -->
        <registration.service.port>1111</registration.service.port>
        <persistence.service.port>2222</persistence.service.port>
        <timeconsuming.service.port>3333</timeconsuming.service.port>
        <configuration.service.port>4444</configuration.service.port>
        <actorserver.service.port>5555</actorserver.service.port>
        <actorserver.service.akka.port>12552</actorserver.service.akka.port>
        <actorclient.service.akka.port>6666</actorclient.service.akka.port>
    </properties>

    <dependencies>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>registrationservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>persistenceservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>configurationservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>actorclientservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>actorserverservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>net.cardosi.microservices</groupId>
            <artifactId>timeconsumingservice</artifactId>
            <version>0.1-SNAPSHOT</version>
        </dependency>
    </dependencies>


    <!--<properties>-->
    <!--&lt;!&ndash; Stand-alone RESTFul application for testing only &ndash;&gt;-->
    <!--<start-class>net.cardosi.microservices.services.Main</start-class>-->
    <!--</properties>-->
    <build>
        <plugins>
            <!-- DOCKERIZE WITH FABRIC8 -->
            <plugin>
                <!-- The Docker Maven plugin is used to create docker image with the fat jar -->
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.maven.plugin.fabric8.version}</version>
                <configuration>
                    <logDate>default</logDate>
                    <autoPull>true</autoPull>
                    <images>
                        <!-- Registration service -->
                        <image>
                            <!-- Alias name which can used for linking containers during runtime -->
                            <alias>registrationservice</alias>
                            <name>${docker.repo}/registration-service:${project.version}</name>

                            <!-- ....................................... -->
                            <!-- Build configuration for creating images -->
                            <!-- ....................................... -->
                            <build>
                                <from>java:8u40</from>
                                <!-- Assembly descriptor holds the reference to the created artifact-->
                                <assembly>
                                    <!-- Normally, one would only use 'assembly.xml' if we could put the assembly descriptor
                                         into src/main/docker But this confuses the alexec plugin, so we put it into another
                                         directory and use an absolute pathe -->
                                    <descriptor>${basedir}/registrationservice/src/main/fabric8/assembly.xml
                                    </descriptor>
                                </assembly>
                                <!-- Expose ports -->
                                <ports>
                                    <port>${registration.service.port}</port>
                                </ports>
                                <!-- Default command for the build image -->
                                <cmd>java -Djava.security.egd=file:/dev/./urandom -jar /maven/registrationservice.jar
                                </cmd>
                            </build>

                            <!-- ............................................................... -->
                            <!-- Runtime configuration for starting/stopping/linking containers -->
                            <!-- ............................................................... -->
                            <run>
                                <!-- Assign dynamically mapped ports to maven variables (which can be reused in integration tests) -->
                                <ports>
                                    <port>${registration.service.port}:${registration.service.port}</port>
                                </ports>
                                <env>
                                    <SERVICE_PORT>${registration.service.port}</SERVICE_PORT>
                                    <CONTAINER_IP>${docker.container.registrationservice.ip}</CONTAINER_IP>
                                </env>
                                <wait>
                                    <!-- Check for this URL to return a 200 return code .... -->
                                    <url>http://${docker.host.address}:${registration.service.port}/</url>
                                    <!-- ... but at max 10 seconds -->
                                    <time>20000</time>
                                </wait>
                                <log>
                                    <prefix>TC</prefix>
                                    <color>cyan</color>
                                </log>
                            </run>
                        </image>

                        <!-- Persistence service -->
                        <image>
                            <!-- Alias name which can used for linking containers during runtime -->
                            <alias>persistenceservice</alias>
                            <name>${docker.repo}/persistence-service:${project.version}</name>

                            <!-- ....................................... -->
                            <!-- Build configuration for creating images -->
                            <!-- ....................................... -->
                            <build>
                                <from>java:8u40</from>
                                <!-- Assembly descriptor holds the reference to the created artifact-->
                                <assembly>
                                    <!-- Normally, one would only use 'assembly.xml' if we could put the assembly descriptor
                                    into src/main/docker But this confuses the alexec plugin, so we put it into another
                                    directory and use an absolute pathe -->
                                    <descriptor>${basedir}/persistenceservice/src/main/fabric8/assembly.xml</descriptor>
                                </assembly>
                                <!-- Expose ports -->
                                <ports>
                                    <port>${persistence.service.port}</port>
                                </ports>
                                <!-- Default command for the build image -->
                                <cmd>java -Djava.security.egd=file:/dev/./urandom -jar /maven/persistenceservice.jar
                                </cmd>
                            </build>

                            <!-- ............................................................... -->
                            <!-- Runtime configuration for starting/stopping/linking containers -->
                            <!-- ............................................................... -->
                            <run>
                                <!-- Assign dynamically mapped ports to maven variables (which can be reused in integration tests) -->
                                <ports>
                                    <port>${persistence.service.port}:${persistence.service.port}</port>
                                </ports>
                                <env>
                                    <SERVICE_PORT>${persistence.service.port}</SERVICE_PORT>
                                </env>
                                <wait>
                                    <!-- Check for this URL to return a 200 return code .... -->
                                    <url>http://${docker.host.address}:${persistence.service.port}/</url>
                                    <!-- ... but at max 10 seconds -->
                                    <time>20000</time>
                                </wait>
                                <dependsOn>
                                    <container>
                                        registrationservice
                                    </container>
                                </dependsOn>
                                <links>
                                    <!-- Links can be referenced via alias (db) or name (postgres:9). If no link-alias (second "db")
                                    is given it takes the first part (first "db") as link alias. So, <link>db</link> would be
                                    enough here -->
                                    <!-- THIS SHOULD CREATE SOME RS_XXX variables -->
                                    <link>registrationservice:rs</link>
                                </links>
                                <log>
                                    <prefix>TC</prefix>
                                    <color>cyan</color>
                                </log>
                            </run>
                        </image>
                        <!-- Configuration service -->
                        <image>
                            <!-- Alias name which can used for linking containers during runtime -->
                            <alias>configurationservice</alias>
                            <name>${docker.repo}/configuration-service:${project.version}</name>

                            <!-- ....................................... -->
                            <!-- Build configuration for creating images -->
                            <!-- ....................................... -->
                            <build>
                                <from>java:8u40</from>
                                <!-- Assembly descriptor holds the reference to the created artifact-->
                                <assembly>
                                    <!-- Normally, one would only use 'assembly.xml' if we could put the assembly descriptor
                                    into src/main/docker But this confuses the alexec plugin, so we put it into another
                                    directory and use an absolute pathe -->
                                    <descriptor>${basedir}/configurationservice/src/main/fabric8/assembly.xml
                                    </descriptor>
                                </assembly>
                                <!-- Expose ports -->
                                <ports>
                                    <port>${configuration.service.port}</port>
                                </ports>
                                <!-- Default command for the build image -->
                                <cmd>java -Djava.security.egd=file:/dev/./urandom -jar /maven/configurationservice.jar
                                </cmd>

                            </build>

                            <!-- ............................................................... -->
                            <!-- Runtime configuration for starting/stopping/linking containers -->
                            <!-- ............................................................... -->
                            <run>
                                <!-- Assign dynamically mapped ports to maven variables (which can be reused in integration tests) -->
                                <ports>
                                    <port>${configuration.service.port}:${configuration.service.port}</port>
                                </ports>
                                <env>
                                    <SERVICE_PORT>${configuration.service.port}</SERVICE_PORT>
                                </env>
                                <wait>
                                    <!-- Check for this URL to return a 200 return code .... -->
                                    <url>http://${docker.host.address}:${configuration.service.port}/</url>
                                    <!-- ... but at max 10 seconds -->
                                    <time>20000</time>
                                </wait>
                                <dependsOn>
                                    <container>
                                        registrationservice
                                    </container>
                                    <container>
                                        persistenceservice
                                    </container>
                                </dependsOn>
                                <links>
                                    <!-- Links can be referenced via alias (db) or name (postgres:9). If no link-alias (second "db")
                                    is given it takes the first part (first "db") as link alias. So, <link>db</link> would be
                                    enough here -->
                                    <!-- THIS SHOULD CREATE SOME RS_XXX, PS_XXX variables -->
                                    <link>registrationservice:rs, persistenceservice:ps</link>
                                </links>
                                <log>
                                    <prefix>TC</prefix>
                                    <color>cyan</color>
                                </log>
                            </run>
                        </image>
                    </images>
                </configuration>

                <!-- Hooking into the lifecycle -->
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


</project>
